X <- loadData(X)
X <- defineParametersdummy(X)
A = matrix()
for (i in 2:length(X$LAST)){
for (j in 0:length(X$LAST)-2){
A[i+j,1] = i
A[i+j,2] = j
}
}
for (i in 1:length(X$LAST)-1){
for (j in 0:length(X$LAST)-2){
A[i+j,1] = i
A[i+j,2] = j
}
}
A = matrix
A = data.frame()
for (i in 1:length(X$LAST)-1){
for (j in 0:length(X$LAST)-2){
A[i+j,1] = i
A[i+j,2] = j
}
}
A = data.frame(, ncol = 2)
A = data.frame(0, ncol = 2)
View(A)
for (i in 1:length(X$LAST)-1){
for (j in 0:length(X$LAST)-2){
A[i+j,1] = i
A[i+j,2] = j
}
}
View(A)
A = data.frame(P1 = 0, P2 = 2)
for (i in 1:length(X$LAST)-1){
for (j in 0:length(X$LAST)-2){
A[i+j,1] = i
A[i+j,2] = j
}
}
View(A)
A[,1] = 3
View(A)
for(j in 2:25){A[,2] = j}
View(A)
for(j in 2:25){A[j,2]
= j}
for(j in 2:25){A[j,2]= j}
View(A)
A[,1] = 2
for(j in 1:25){A[j,2]= j}
View(A)
A = data.frame(P1 = 0, P2 = 2)
for(i in 1:25) {
A[i,1] = 2
for(j in 1:25){A[i+j,2]= j}
}
View(A)
A = data.frame(P1 = 0, P2 = 2)
for(i in 1:25) {
for(j in 0:25){
A[i+j] = i
A[i+j,2]= j
}
}
View(A)
A = data.frame(P1 = 0, P2 = 2)
for(i in 1:25) {
for(j in 0:25){
A[i+j,1] = i
A[i+j,2]= j
}
}
View(A)
A[,1] = c(2:25, rep)
?rep
A[,1] = c(rep(2:25, 25))
A = data.frame(P1 = 0, P2 = 2)
A[,1] = c(rep(2:25, 25))
A[,1] = c(rep(2:25, 25))
A = data.frame(P1 = 1:600, P2 = 1:600)
A[,1] = c(rep(2:25, 25))
View(A)
A[,1] = rep(2:25, 25, each = T)
View(A)
A[,1] = rep(2:25, each = 25)
View(A)
A[,2] = rep(2:25, 25)
View(A)
A[,1]==A[,2]
?drop
drop(A[ A[,1]==A[,2], ])
is.na()
?is.na()
select( A[ A[,1]==A[,2]]
)
select( A[ A[,1]==A[,2],]
)
select( A[ A[,1]!=A[,2],]
)
B = select( A[ A[,1]!=A[,2],]
)
View(B)
A[ A[,1]==A[,2], ]
A[ A[,1]!=A[,2], ]
A = A[ A[,1]!=A[,2], ]
View(A)
A = NULL
A[,1] = rep(2:25, each = 25)
A[,2] = rep(2:25, 25)
24*24
A = data.frame(P1 = 1:600, P2 = 1:600)
A[,1] = rep(2:25, each = 25)
View(A)
A[,2] = rep(2:25, 25)
A[,1] = rep(2:length(X$LAST), each = length(X$LAST))
A[,2] = rep(2:length(X$LAST), length(X$LAST))
A = A[ A[,1]!=A[,2], ]
View(A)
A = data.frame(index1 = 1:600, index2 = 1:600)
A[,1] = rep(2:length(X$LAST), each = length(X$LAST))
A[,2] = rep(2:length(X$LAST), length(X$LAST))
A = A[ A[,1]!=A[,2], ]
View(A)
?apply
length(A)
dim(A)[1]
for(i in 1:dim(A)[1]){
B[i] = A[i]
}
for(i in 1:dim(A)[1]){
B[i] = A[i,]
}
View(B)
for(i in 1:dim(A)[1]){
B[i,] = A[i,]
}
View(B)
B = NULL
for(i in 1:dim(A)[1]){
B[i,] = A[i,]
}
for(i in 1:dim(A)[1]){
B = A[i,]
}
View(B)
X <- list()
X <- loadData(X)
X <- defineParametersdummy(X)
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
X <- correlationAnalysis(X)
}
X$Maturity
X$Maturity[1]
X$Maturity[2]
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
B <- correlationAnalysis(X)
}
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])
X$Maturity[1]
select(X$Maturity[1])
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])#saving appropriate timeseries from dataframe based on maturities
X <- list()
X <- loadData(X)
X <- defineParametersdummy(X)
X$Maturity
X$Maturity[1]
for(i in 1:dim(A)[1]){
X$Maturity = as.vector(A[i,])
B <- correlationAnalysis(X)
}
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])#saving appropriate timeseries from dataframe based on maturities
X <- list()
X <- loadData(X)
X <- defineParametersdummy(X)
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])#saving appropriate timeseries from dataframe based on maturities
View(TS1)
TS1 <- X$LAST %>% dplyr::select(A[1,1])#saving appropriate timeseries from dataframe based on maturities
TS1 <- X$LAST %>% dplyr::select(A[1,2])#saving appropriate timeseries from dataframe based on maturities
View(TS1)
TS1 <- X$LAST %>% dplyr::select(A[1,1])#saving appropriate timeseries from dataframe based on maturities
X$Maturity = A[1,]
X$Maturity
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])#saving appropriate timeseries from dataframe based on maturities
?matrix
A = matrix(A[ A[,1]!=A[,2], ])
View(A)
A = matrix(1:600, 1:600)
View(A)
A = data.frame(1:600, 1:600)
View(A)
A[,1] = rep(2:length(X$LAST), each = length(X$LAST))
A[,2] = rep(2:length(X$LAST), length(X$LAST))
A = A[ A[,1]!=A[,2], ]
A = as.matrix(A)
View(A)
X$Maturity = A[1,]
X$Maturity
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])#saving appropriate timeseries from dataframe based on maturities
View(TS1)
A = data.frame(index1 = 1:600, index2 = 1:600)
A[,1] = rep(2:length(X$LAST), each = length(X$LAST))
A[,2] = rep(2:length(X$LAST), length(X$LAST))
A = A[ A[,1]!=A[,2], ]
A = as.matrix(A)
View(A)
X$Maturity = A[1,]
X$Maturity
TS1 <- X$LAST %>% dplyr::select(X$Maturity[1])#saving appropriate timeseries from dataframe based on maturities
View(TS1)
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
B <- correlationAnalysis(X)
}
for(i in 1:3){
X$Maturity = A[i,]
B <- correlationAnalysis(X)
}
View(B)
B = correlationAnalysis(X)
str(B)
for(i in 1:3){
X$Maturity = A[i,]
B <- correlationAnalysis(X)[[5]]
}
View(B)
for(i in 1:3){
X$Maturity = A[i,]
B[i] <- correlationAnalysis(X)[[5]]
}
X$Maturity
X <- correlationAnalysis(X)
X$CasualityData
X$CasualityData$Values
as.matrix(X$CasualityData$Values)
unlist(X$CasualityData$Values)
matrix(unlist(X$CasualityData$Values))
M = matrix(unlist(X$CasualityData$Values))
View(M)
X$CasualityData$Values
M = matrix(unlist(X$CasualityData))
View(M)
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
B = data.frame(1:length(X$LAST$Date), 1:3)
B = data.frame(rep(1:length(X$LAST$Date)), 3)
View(B)
B = data.frame(rep(1:length(X$LAST$Date),3))
B = data.frame()
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
B = matrix(, nrow = 2456, ncol = 3  )
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
View(B)
B = matrix(NULL, nrow = dim(X$LAST)[1], ncol = 3  )
B = matrix(0, nrow = dim(X$LAST)[1], ncol = 3  )
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-1, ncol = 3  )
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-1, ncol = dim(A)[2] )
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-1, ncol = dim(A)[1] )
View(B)
B = data.frame(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-1, ncol = dim(A)[1] )
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-1, ncol = dim(A)[1] )
2456*552
for(i in 1:552){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
for(i in 1:25){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
View(B)
B = data.frame(B)
View(B)
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-1, ncol = dim(A)[1] )
B = data.frame(B)
for(i in 1:25){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
View(B)
?data.frame
?tibble
?as_tibble
B = as_tibble(B)
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-X$CorrelationLag, ncol = dim(A)[1] )
B = as_tibble(B)
View(B)
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-X$CorrelationLag,
ncol = dim(A)[1]) %>% as_tibble()
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
}
View(B)
plot(B)
install.packages("ggnet2")
library(ggnet2)
install.packages("GGally")
library(GGally)
library(network)
library(sna)
library(ggplot2)
install.packages("network")
insall.packages("sna")
install.packages("sna")
library(network)
library(sna)
ggnet2(B)
?net
?network
network(B)
network(matrix(B))
network(as.matrix(B))
as.network(B)
install.packages("igraph")
library(igraph)
IGRAPH U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/x), circular (g/x)
?edge()
igraph.console()
?igraph.console()
console()
el <- matrix( c("foo", "bar", "bar", "foobar"), nc = 2, byrow = TRUE)
graph_from_edgelist(el)
View(el)
el <- matrix( c("foo", "ter", "bar", "foobar"), nc = 2, byrow = TRUE)
graph_from_edgelist(el)
View(el)
graph(edges = A)
View(A)
graph(edges = A, n = 552)
graph(edges = A[,1])
graph(edges = A[1,])
graph(edges = A[i,])
graph(edges = A[,])
graph(edges = t(A))
plot(graph(edges = t(A)))
graph(edges = t(A))
g1 = graph(edges = t(A))
plot(g1)
class(g1)
g1
g1 = graph(edges = t(A), directed = F)
g1
plot(g1)
plot(g1)
g1 = graph(edges = t(A), directed = T)
plot(g1)
g1 = graph(edges = t(A),n = 552, directed = T)
plot(g1)
M = cbind.data.frame(A, B)
M = cbind.data.frame(A, t(B))
View(M)
max(B)
max(B[,]
max(B[,]
)
max(B[,])
B %>% max()
B %>% select() %>% max()
max(B[,i])
max(B[,1])
max(B[,552])
mean(c(2,3))
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
maxes[i] = max(unlist(correlationAnalysis(X)[[5]]))
mins[i] = min(unlist(correlationAnalysis(X)[[5]]))
means[i] = mean(unlist(correlationAnalysis(X)[[5]]))
}
maxes = NULL
mins = NULL
means = NULL
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
#B[,i] <- unlist(correlationAnalysis(X)[[5]])
maxes[i] = max(unlist(correlationAnalysis(X)[[5]]))
mins[i] = min(unlist(correlationAnalysis(X)[[5]]))
means[i] = mean(unlist(correlationAnalysis(X)[[5]]))
}
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-X$CorrelationLag,
ncol = dim(A)[1]) %>% as_tibble()
maxes = NULL
mins = NULL
means = NULL
for(i in 1:dim(A)[1]){
X$Maturity = A[i,]
B[,i] <- unlist(correlationAnalysis(X)[[5]])
maxes[i] = max(B[,i])
mins[i] = min(B[,i])
means[i] = mean(B[,i])
}
mean(B[,1])
View(B)
source('~/Corvinus/EFRP/R/gitTest/Feladat_2/correlationAnalysis.r')
library(dplyr)
library(magrittr)
library(rio)
X <- list()
X <- loadData(X)
source('~/Corvinus/EFRP/R/gitTest/Feladat_2/defineParametersdummy.r')
source('~/Corvinus/EFRP/R/gitTest/Feladat_2/loadData.r')
source('~/Corvinus/EFRP/R/gitTest/Feladat_2/correlationAnalysis.r')
X <- loadData(X)
X <- defineParametersdummy(X)
A = data.frame(index1 = 1:600, index2 = 1:600)
A[,1] = rep(2:length(X$LAST), each = length(X$LAST))
A[,2] = rep(2:length(X$LAST), length(X$LAST))
A = A[ A[,1]!=A[,2], ]
A = as.matrix(A)
B = matrix(0, nrow = dim(X$LAST)[1]-X$CorrelationWindow-X$CorrelationLag,
ncol = dim(A)[1]) %>% as_tibble()
maxes = NULL
mins = NULL
means = NULL
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- correlationAnalysis(X)
maxes[i] = max(B[,i])
mins[i] = min(B[,i])
means[i] = mean(B[,i])
}
source('~/Corvinus/EFRP/R/gitTest/Feladat_2/staticCorrelation.r')
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- correlationAnalysis(X)
maxes[i] = max(B[,i])
mins[i] = min(B[,i])
means[i] = mean(B[,i])
}
View(B)
mean(na.omit(B[,1]))
mean((B[,1])
mean((B[,1]))
mean(B[,1])
B[,1]
B[,1] %>% mean()
B[,1] %>% as.vector() %>% mean()
B[,1] %>% as.vector()
B[,1] %>% as.matrix()
B[,1] %>% vector()
B[,1] %>% as.matrix() %>% mean()
for(i in 1:3){
X$Maturity = A[i,]
B[,i] <- correlationAnalysis(X)
maxes[i] = max(B[,i])
mins[i] = min(B[,i])
means[i] = B[,i]  %>% as.matrix() %>% mean()
}
library(igraph)
graph( cbind(A[1:3,], maxes) )
cbind(A[1:3,], maxes)
?graph
?edge()
?edge(A)
edge(A)
graph( edge[A])
graph( edge(A))
?igraph
graph_from_data_frame(cbind(A[1:3,],maxes) )
plot(graph_from_data_frame(cbind(A[1:3,],maxes) ))
plot(graph_from_data_frame(cbind(A[1:3,]) ))
plot(graph_from_data_frame(cbind(A[1:3,]), maxes ))
plot(graph_from_data_frame(A[1:3,])
plot(graph_from_data_frame(A[1:3,]))
plot(graph_from_data_frame(A[1:3,]))
plot(graph_from_data_frame(cbind(A[1:3,]), maxes ))
plot(graph_from_data_frame(A[1:3,]))
plot(graph_from_data_frame(cbind(A[1:3,]), maxes ))
plot(graph_from_data_frame(A[1:3,]))
plot(graph_from_data_frame(A[1:3,], vertices = maxes)
plot(graph_from_data_frame(A[1:3,], vertices = maxes)
)
plot(graph_from_data_frame(A[1:3,], vertices = maxes))
?vertex
vertex(maxes)
vertices(maxes)
plot(graph_from_data_frame(A[1:3,], vertices = maxes))
as_data_frame(maxes, what = "vertices")
as_data_frame(graph(maxes), what = "vertices")
graph(maxes)
plot(graph_from_data_frame(A[], vertices = maxes))
plot(graph_from_data_frame(A))
ggplot(graph_from_data_frame(A))
?plot.graph
plot.igraph(graph_from_data_frame(A))
?plot.igraph(graph_from_data_frame(A))
?plot.igraph(graph_from_data_frame(A[1:3,]))
plot.igraph(graph_from_data_frame(A[1:3,]))
plot.igraph(graph_from_data_frame(A[1:100,]))
plot.igraph(graph_from_data_frame(A[1:50,]))
plot.igraph(graph_from_data_frame(A[1:3,]), size = maxes)
plot.igraph(graph_from_data_frame(A[1:3,]), size = mins)
plot.igraph(graph_from_data_frame(A[1:3,]), size = means)
plot.igraph(graph_from_data_frame(A[1:3,]), color = means)
plot.igraph(graph_from_data_frame(A[1:3,]), frame.color = means)
plot.igraph(graph_from_data_frame(cbind(A[1:3,],maxes) ))
